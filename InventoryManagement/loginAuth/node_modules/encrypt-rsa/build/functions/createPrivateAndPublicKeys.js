"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPrivateAndPublicKeys = void 0;
var crypto = __importStar(require("crypto"));
/**
 * Generates a pair of RSA private and public keys with the specified modulus length.
 *
 * If the `crypto.generateKeyPairSync` function is available, it generates the keys using the provided modulus length,
 * otherwise, it returns empty strings for both keys.
 *
 * @param {number} [modulusLength=2048] - The length of the RSA modulus in bits. Defaults to 2048 bits.
 * @returns {returnCreateKeys} An object containing the generated RSA public and private keys in PEM format.
 *
 * @example
 * const { publicKey, privateKey } = createPrivateAndPublicKeys(4096);
 * console.log(publicKey);  // Outputs the public key in PEM format
 * console.log(privateKey); // Outputs the private key in PEM format
 */
function createPrivateAndPublicKeys(modulusLength) {
    if (modulusLength === void 0) { modulusLength = 2048; }
    if (typeof crypto.generateKeyPairSync === 'function') {
        var _a = crypto.generateKeyPairSync('rsa', {
            modulusLength: modulusLength,
            publicKeyEncoding: {
                type: 'spki',
                format: 'pem',
            },
            privateKeyEncoding: {
                type: 'pkcs8',
                format: 'pem',
            },
        }), privateKey = _a.privateKey, publicKey = _a.publicKey;
        return { publicKey: publicKey, privateKey: privateKey };
    }
    return { privateKey: '', publicKey: '' };
}
exports.createPrivateAndPublicKeys = createPrivateAndPublicKeys;
exports.default = createPrivateAndPublicKeys;
