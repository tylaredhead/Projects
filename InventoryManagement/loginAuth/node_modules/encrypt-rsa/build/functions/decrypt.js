"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decrypt = void 0;
var crypto = __importStar(require("crypto"));
var helpers_1 = require("../utils/helpers");
/**
 * Decrypts a base64-encoded string using an RSA public key.
 *
 * The function first decodes the provided RSA public key and the base64-encoded text,
 * then decrypts the text using the RSA public key.
 *
 * @param {parametersOfDecryptPublic} args - An object containing the text to decrypt and the RSA public key.
 * @param {string} args.text - The base64-encoded string to be decrypted.
 * @param {string} [args.publicKey] - The RSA public key to use for decryption. If not provided, a default key may be used.
 * @returns {string} The decrypted string in UTF-8 format.
 * @throws {Error} If decryption fails due to invalid key or input.
 *
 * @example
 * const decryptedText = decrypt({ text: 'base64EncryptedText', publicKey: 'publicKeyString' });
 * console.log(decryptedText); // Outputs the decrypted string in UTF-8 format
 */
function decrypt(args) {
    var text = args.text, publicKey = args.publicKey;
    var publicKeyDecoded = (0, helpers_1.decode)(publicKey);
    var buffer = Buffer.from(text, 'base64');
    var decrypted = crypto.publicDecrypt(publicKeyDecoded, buffer);
    return decrypted.toString('utf8');
}
exports.decrypt = decrypt;
exports.default = decrypt;
