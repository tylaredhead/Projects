"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.encrypt = void 0;
var crypto = __importStar(require("crypto"));
var helpers_1 = require("../utils/helpers");
/**
 * Encrypts a string using an RSA private key.
 *
 * This function encodes the provided RSA private key, converts the input text to a buffer,
 * and encrypts it using the private key. The result is returned as a base64-encoded string.
 *
 * @param {parametersOfEncryptPrivate} args - An object containing the text to encrypt and the RSA private key.
 * @param {string} args.text - The plain text to be encrypted.
 * @param {string} [args.privateKey] - The RSA private key to use for encryption. If not provided, a default key may be used.
 * @returns {string} The encrypted string in base64 format.
 * @throws {Error} If encryption fails due to invalid key or input.
 *
 * @example
 * const encryptedText = encrypt({ text: 'Hello, World!', privateKey: 'privateKeyString' });
 * console.log(encryptedText); // Outputs the encrypted string in base64 format
 */
function encrypt(args) {
    var text = args.text, privateKey = args.privateKey;
    var privateKeyDecoded = (0, helpers_1.decode)(privateKey);
    var buffer = Buffer.from(text);
    var encrypted = crypto.privateEncrypt(privateKeyDecoded, buffer);
    return encrypted.toString('base64');
}
exports.encrypt = encrypt;
exports.default = encrypt;
