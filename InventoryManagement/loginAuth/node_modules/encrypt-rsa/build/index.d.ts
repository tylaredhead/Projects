/// <reference types="node" />
import { parametersOfDecrypt, parametersOfDecryptPublic, parametersOfEncrypt, parametersOfEncryptPrivate, returnCreateKeys } from './utils/types';
/**
 * NodeRSA class provides encryption and decryption methods using RSA keys.
 * It supports string and buffer encryption/decryption with both public and private keys.
 */
declare class NodeRSA {
    /**
       * @private
       * @type {string | undefined}
       * Public key used for encryption.
       */
    private publicKey;
    /**
       * @private
       * @type {string | undefined}
       * Private key used for decryption.
       */
    private privateKey;
    /**
       * @private
       * @type {number}
       * Length of the RSA modulus, defaults to 2048 bits.
       */
    private modulusLength;
    /**
       * @private
       * @type {'base64'}
       * Encoding format for the keys.
       */
    private keyBase64;
    /**
       * Constructs a new instance of the NodeRSA class.
       *
       * @param {string} [publicKey] - Optional public key for encryption.
       * @param {string} [privateKey] - Optional private key for decryption.
       * @param {number} [modulusLength=2048] - Length of the RSA modulus in bits.
       */
    constructor(publicKey?: string, privateKey?: string, modulusLength?: number);
    /**
       * Encrypts a string using the RSA public key.
       *
       * @param {parametersOfEncrypt} args - Parameters for encryption, including the text and public key.
       * @returns {string} Encrypted string in base64 format.
       */
    encryptStringWithRsaPublicKey(args: parametersOfEncrypt): string;
    /**
       * Decrypts a string using the RSA private key.
       *
       * @param {parametersOfDecrypt} args - Parameters for decryption, including the encrypted text and private key.
       * @returns {string} Decrypted plain text string.
       */
    decryptStringWithRsaPrivateKey(args: parametersOfDecrypt): string;
    /**
       * Encrypts a string using the RSA private key.
       *
       * @param {parametersOfEncryptPrivate} args - Parameters for encryption, including the text and private key.
       * @returns {string} Encrypted string in base64 format.
       */
    encrypt(args: parametersOfEncryptPrivate): string;
    /**
       * Decrypts a string using the RSA public key.
       *
       * @param {parametersOfDecryptPublic} args - Parameters for decryption, including the encrypted text and public key.
       * @returns {string} Decrypted plain text string.
       */
    decrypt(args: parametersOfDecryptPublic): string;
    /**
       * Creates a pair of RSA private and public keys with the given modulus length.
       *
       * @param {number} [modulusLength=this.modulusLength] - Length of the RSA modulus in bits.
       * @returns {returnCreateKeys} The generated RSA private and public keys.
       */
    createPrivateAndPublicKeys(modulusLength?: number): returnCreateKeys;
    /**
       * Encrypts a buffer using the RSA public key.
       *
       * @param {Buffer} buffer - The buffer to encrypt.
       * @param {string} [publicKey] - Optional public key for encryption.
       * @returns {string} Encrypted buffer as a base64 string.
       */
    encryptBufferWithRsaPublicKey(buffer: Buffer, publicKey?: string): string;
    /**
       * Decrypts a buffer using the RSA private key.
       *
       * @param {string} encryptedText - The encrypted base64 string to decrypt.
       * @param {string} [privateKey] - Optional private key for decryption.
       * @returns {Buffer} Decrypted buffer.
       */
    decryptBufferWithRsaPrivateKey(encryptedText: string, privateKey?: string): Buffer;
}
export default NodeRSA;
