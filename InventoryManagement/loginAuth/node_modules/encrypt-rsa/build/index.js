"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var convertKetToBase64_1 = __importDefault(require("./functions/convertKetToBase64"));
var createPrivateAndPublicKeys_1 = __importDefault(require("./functions/createPrivateAndPublicKeys"));
var decrypt_1 = __importDefault(require("./functions/decrypt"));
var decryptStringWithRsaPrivateKey_1 = __importDefault(require("./functions/decryptStringWithRsaPrivateKey"));
var encrypt_1 = __importDefault(require("./functions/encrypt"));
var encryptStringWithRsaPublicKey_1 = __importDefault(require("./functions/encryptStringWithRsaPublicKey"));
/**
 * NodeRSA class provides encryption and decryption methods using RSA keys.
 * It supports string and buffer encryption/decryption with both public and private keys.
 */
var NodeRSA = /** @class */ (function () {
    /**
       * Constructs a new instance of the NodeRSA class.
       *
       * @param {string} [publicKey] - Optional public key for encryption.
       * @param {string} [privateKey] - Optional private key for decryption.
       * @param {number} [modulusLength=2048] - Length of the RSA modulus in bits.
       */
    function NodeRSA(publicKey, privateKey, modulusLength) {
        this.publicKey = publicKey;
        this.privateKey = privateKey;
        this.modulusLength = modulusLength || 2048;
        this.keyBase64 = 'base64';
    }
    /**
       * Encrypts a string using the RSA public key.
       *
       * @param {parametersOfEncrypt} args - Parameters for encryption, including the text and public key.
       * @returns {string} Encrypted string in base64 format.
       */
    NodeRSA.prototype.encryptStringWithRsaPublicKey = function (args) {
        var _a = args.publicKey, publicKey = _a === void 0 ? this.publicKey : _a;
        return (0, encryptStringWithRsaPublicKey_1.default)(__assign(__assign({}, args), { publicKey: (0, convertKetToBase64_1.default)(publicKey) }));
    };
    /**
       * Decrypts a string using the RSA private key.
       *
       * @param {parametersOfDecrypt} args - Parameters for decryption, including the encrypted text and private key.
       * @returns {string} Decrypted plain text string.
       */
    NodeRSA.prototype.decryptStringWithRsaPrivateKey = function (args) {
        var _a = args.privateKey, privateKey = _a === void 0 ? this.privateKey : _a;
        return (0, decryptStringWithRsaPrivateKey_1.default)(__assign(__assign({}, args), { privateKey: (0, convertKetToBase64_1.default)(privateKey) }));
    };
    /**
       * Encrypts a string using the RSA private key.
       *
       * @param {parametersOfEncryptPrivate} args - Parameters for encryption, including the text and private key.
       * @returns {string} Encrypted string in base64 format.
       */
    NodeRSA.prototype.encrypt = function (args) {
        var _a = args.privateKey, privateKey = _a === void 0 ? this.privateKey : _a;
        return (0, encrypt_1.default)(__assign(__assign({}, args), { privateKey: (0, convertKetToBase64_1.default)(privateKey) }));
    };
    /**
       * Decrypts a string using the RSA public key.
       *
       * @param {parametersOfDecryptPublic} args - Parameters for decryption, including the encrypted text and public key.
       * @returns {string} Decrypted plain text string.
       */
    NodeRSA.prototype.decrypt = function (args) {
        var _a = args.publicKey, publicKey = _a === void 0 ? this.publicKey : _a;
        return (0, decrypt_1.default)(__assign(__assign({}, args), { publicKey: (0, convertKetToBase64_1.default)(publicKey) }));
    };
    /**
       * Creates a pair of RSA private and public keys with the given modulus length.
       *
       * @param {number} [modulusLength=this.modulusLength] - Length of the RSA modulus in bits.
       * @returns {returnCreateKeys} The generated RSA private and public keys.
       */
    NodeRSA.prototype.createPrivateAndPublicKeys = function (modulusLength) {
        if (modulusLength === void 0) { modulusLength = this.modulusLength; }
        return (0, createPrivateAndPublicKeys_1.default)(modulusLength);
    };
    /**
       * Encrypts a buffer using the RSA public key.
       *
       * @param {Buffer} buffer - The buffer to encrypt.
       * @param {string} [publicKey] - Optional public key for encryption.
       * @returns {string} Encrypted buffer as a base64 string.
       */
    NodeRSA.prototype.encryptBufferWithRsaPublicKey = function (buffer, publicKey) {
        var base64String = buffer.toString(this.keyBase64);
        return this.encryptStringWithRsaPublicKey({ text: base64String, publicKey: publicKey });
    };
    /**
       * Decrypts a buffer using the RSA private key.
       *
       * @param {string} encryptedText - The encrypted base64 string to decrypt.
       * @param {string} [privateKey] - Optional private key for decryption.
       * @returns {Buffer} Decrypted buffer.
       */
    NodeRSA.prototype.decryptBufferWithRsaPrivateKey = function (encryptedText, privateKey) {
        var decryptedBase64 = this.decryptStringWithRsaPrivateKey({ text: encryptedText, privateKey: privateKey });
        return Buffer.from(decryptedBase64, this.keyBase64);
    };
    return NodeRSA;
}());
exports.default = NodeRSA;
